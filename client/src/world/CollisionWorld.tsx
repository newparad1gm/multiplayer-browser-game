/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.0.9 collision-world.glb
*/

import React, { useEffect, useRef } from 'react'
import * as THREE from 'three';
import { useGLTF, useCubeTexture } from '@react-three/drei';
import { World } from './World';

interface WorldProps {
    world: World;
	startGame: () => void;
	divRef: React.RefObject<HTMLDivElement>;
}

export const CollisionWorld = (props: WorldProps): JSX.Element => {
	const { world, startGame, divRef } = props;
	const { nodes, materials, scene } = useGLTF('/gltf/collision-world.glb');
	const skybox = useCubeTexture(['px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'], { path: '/textures/skybox/' });
	const sceneRef = useRef<THREE.Scene>(null);

    useEffect(() => {
		if (sceneRef.current && divRef.current) {
			skybox.encoding = THREE.sRGBEncoding;
			world.background = skybox;
			world.fog = new THREE.Fog(0x88ccee, 0, 50);

			const fillLight = new THREE.HemisphereLight(0x4488bb, 0x002244, 0.5);
			fillLight.position.set(2, 1, 1);
			world.lights.push(fillLight);

			const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
			directionalLight.position.set(-5, 25, -1);
			directionalLight.castShadow = true;
			directionalLight.shadow.camera.near = 0.01;
			directionalLight.shadow.camera.far = 500;
			directionalLight.shadow.camera.right = 30;
			directionalLight.shadow.camera.left = -30;
			directionalLight.shadow.camera.top	= 30;
			directionalLight.shadow.camera.bottom = -30;
			directionalLight.shadow.mapSize.width = 1024;
			directionalLight.shadow.mapSize.height = 1024;
			directionalLight.shadow.radius = 4;
			directionalLight.shadow.bias = -0.00006;
			world.lights.push(directionalLight);

			const object = world.addScreen(divRef.current);
			if (object) {
				sceneRef.current.add(object);
			}

			world.worldScene = sceneRef.current;
			world.octree.fromGraphNode(sceneRef.current);

			startGame();
		}
    }, [skybox, scene, world, divRef, sceneRef, startGame]);

	return (
		<group {...props} dispose={null}>
			<scene ref={sceneRef}>
				{/* 
				// @ts-ignore */}
				<mesh geometry={nodes.Cube004.geometry} material={materials['Material.001']} position={[7.68, -5.59, 26.38]} scale={0.5} castShadow={true} receiveShadow={true} />
			</scene>
		</group>
	)
}

useGLTF.preload('/gltf/collision-world.glb');
